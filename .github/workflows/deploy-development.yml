name: Build and deploy development

on:
  push:
    branches:
      - '**'
      - '!build-artifacts'
      - '!release'


permissions:
 contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Enable CI
        run: npm ci --only=production

      - name: Init github
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
        
      - name: Extract package.json version
        id: package_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"


      - name: Create or update package version
        id: new_version
        run: |
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          
          if [[ ${{steps.package_version.outputs.PACKAGE_VERSION}} == *$BRANCH_NAME* ]]; then
            VERSION_TAG=$(echo "${{steps.package_version.outputs.PACKAGE_VERSION}}" | cut -d'-' -f1)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_TAG"
            PATCH=$((PATCH + 1))
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH-$BRANCH_NAME"
          else
            NEW_VERSION="1.0.0-$BRANCH_NAME"
            fi

          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Checkout to build-artifacts
        run: |
          git fetch origin build-artifacts
          git checkout --force build-artifacts
  
      - name: Remove previous build folder from build-artifacts
        run: |
          rm -rf build
          git add .

          if git diff --quiet; then
            echo "Uncommitted changes was not detected"
          else
            git commit -m "Removed previous build version"
          fi

      - name: Copy package.json, package-lock.json and tsconfig.json to build-artifacts
        run: |
          git checkout ${{steps.new_version.outputs.BRANCH_NAME}} package.json package-lock.json tsconfig.json
  
      - name: Checkout to ${{steps.new_version.outputs.BRANCH_NAME}}
        run: |
          git fetch origin ${{steps.new_version.outputs.BRANCH_NAME}}
          git checkout ${{steps.new_version.outputs.BRANCH_NAME}}

      - name: Build project
        run: |
          npm install
          npm run build
      
      - name: Update ${{steps.new_version.outputs.BRANCH_NAME}} version
        # "git clean --force" because it will not affect "build" folder and "package.json"
        run: |
          git clean --force
          git fetch origin
          git checkout
          npm version ${{ steps.new_version.outputs.NEW_VERSION }} --no-git-tag-version

      - name: Push new package.json version to ${{steps.new_version.outputs.BRANCH_NAME}}
        run: |
          git add package.json package-lock.json
          git commit -m "Updated ${{ steps.new_version.outputs.BRANCH_NAME }} package.json package-lock.json version to ${{ steps.new_version.outputs.NEW_VERSION }}"
          git push origin ${{ steps.new_version.outputs.BRANCH_NAME }}

      - name: Checkout to build-artifacts
        run: |
          git fetch origin build-artifacts
          git checkout --force build-artifacts
      
      - name: Copy package.json
        run: git checkout ${{steps.new_version.outputs.BRANCH_NAME}} package.json

      - name: Push build folder
        run: |
          git add --force build/
          git add --force package.json
          git commit -m "Added build artifacts for ${{ steps.new_version.outputs.NEW_VERSION }}"
          git tag ${{ steps.new_version.outputs.NEW_VERSION }}
          git push --tags origin build-artifacts
